// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

import { Test } from "forge-std/Test.sol";

contract ErrorsTest is Test {
    error DeployedAddressDifferentFromExpected();
    error InvalidInput();
    error InitializationFailed();
    error CashbackTokenPriceNotConfigured();
    error InvalidValue();
    error OnlyEtherFiSafe();
    error CannotWithdrawZeroAmount();
    error WithdrawFundsFailed();
    error OnlyCashModule();
    error ArrayLengthMismatch();
    error InvalidModule();
    error InvalidCashModule();
    error InvalidCashLens();
    error OnlyAdmin();
    error ModulesAlreadySetup();
    error CollateralPreferenceIsEmpty();
    error UnsupportedCollateralToken();
    error UnsupportedRepayToken();
    error UnsupportedBorrowToken();
    error InsufficientCollateral();
    error InsufficientCollateralToRepay();
    error InsufficientLiquidity();
    error CannotLiquidateYet();
    error ZeroCollateralValue();
    error OnlyUserCanRepayWithCollateral();
    error AlreadyCollateralToken();
    error AlreadyBorrowToken();
    error NotACollateralToken();
    error NoCollateralTokenLeft();
    error NotABorrowToken();
    error NoBorrowTokenLeft();
    error TotalCollateralAmountNotZero();
    error InsufficientLiquidityPleaseTryAgainLater();
    error LiquidAmountLesserThanRequired();
    error ZeroTotalBorrowTokens();
    error InsufficientBorrowShares();
    error UserStillLiquidatable();
    error TotalBorrowingsForUserNotZero();
    error BorrowTokenConfigAlreadySet();
    error AccountUnhealthy();
    error BorrowTokenStillInTheSystem();
    error RepaymentAmountIsZero();
    error LiquidatableAmountIsZero();
    error LtvCannotBeGreaterThanLiquidationThreshold();
    error OraclePriceZero();
    error BorrowAmountZero();
    error SharesCannotBeZero();
    error SharesCannotBeLessThanMinShares();
    error SupplyCapBreached();
    error EtherFiSafeCannotSupplyDebtTokens();
    error NotAEtherFiSafe();
    error BorrowTokenCannotBeRemovedFromCollateral();
    error DuplicateElementFound();
    error InvalidSignatures();
    error InvalidAddress();
    error InvalidSigner();
    error InvalidERC1271Signer();
    error ExceededDailySpendingLimit();
    error ExceededMonthlySpendingLimit();
    error DailyLimitCannotBeGreaterThanMonthlyLimit();
    error InvalidTimezoneOffset();
    error InsufficientBalanceOnSafe();
    error TransactionAlreadyCleared();
    error OnlyEtherFiWallet();
    error UnsupportedToken();
    error OnlyBorrowToken();
    error AmountZero();
    error InsufficientBalance();
    error BorrowingsExceedMaxBorrowAfterSpending();
    error RecipientCannotBeAddressZero();
    error OnlyCashModuleController();
    error CannotWithdrawYet();
    error ModeAlreadySet();
    error OnlyDebtManager();
    error AlreadyInSameTier();
    error CashbackPercentageGreaterThanMaxAllowed();
    error SplitAlreadyTheSame();
    error OnlyOneTokenAllowedInCreditMode();
    error SettlementDispatcherNotSetForBinSponsor();
    error UnsupportedLiquidAsset();
    error AssetNotSupportedForDeposit();
    error Unauthorized();
    error InvalidConfiguration();
    error InsufficientNativeFee();
    error NativeTransferFailed();
    error InsufficientReturnAmount();
    error UnsupportedAsset();
    error SwappingToSameAsset();
    error OutputLessThanMinAmount();
    error InsufficientAmount();
    error InsufficientMinAmount();
    error InvalidStargatePool();
    error OnlySafeAdmin();
    error InvalidSignature();
    error TokenOracleNotSet();
    error PriceOracleFailed();
    error InvalidPrice();
    error OraclePriceTooOld();
    error StablePriceCannotBeZero();
    error OnlyUpgrader();
    error OnlyPauser();
    error OnlyUnpauser();
    error InsufficientSigners();
    error EmptySigners();
    error InvalidOwnerAddress();
    error AllOwnersRemoved();
    error OwnersLessThanThreshold();
    error InvalidThreshold();
    error MultiSigAlreadySetup();
    error CannotRemoveCashModule();
    error UnsupportedModule();
    error OnlyModules();
    error CallFailed();
    error ModuleSetupFailed();
    error InvalidOverridingRecoverySigners();
    error RecoveryManagerAlreadyInitialized();
    error InvalidUserRecoverySigner();
    error InvalidRecoverySignature();
    error RecoveryDisabled();
    error RecoverySignersLengthLessThanThreshold();
    error InsufficientRecoverySignatures();
    error InvalidRecoverySignatures();
    error InvalidStartIndex();
    error InvalidRecoverySigner();
    error DestinationDataNotSet();
    error StargateValueInvalid();
    error InsufficientFeeToCoverCost();
    error InsufficientMinReturn();
    error InvalidTeller();
    error OnlyOwner();
    error EthTransferFailed();
    error BalanceTooLow();
    error AmountGreaterThanDeposit();
    error AmountCannotBeZero();
    error NotARegisteredSafe();
    error TopUpAlreadyProcessed();
    error InvalidTopUpAddress();
    error TokenCannotBeZeroAddress();
    error TokenConfigNotSet();
    error ZeroBalance();
    error RecoveryWalletNotSet();
    error RecoveryWalletCannotBeZeroAddress();
    error OnlyUnsupportedTokens();
    error InvalidConfig();
    error OnlyRoleRegistryOwner();

    function test_error() public {
        emit log_named_bytes("DeployedAddressDifferentFromExpected", abi.encodePacked(DeployedAddressDifferentFromExpected.selector));
        emit log_named_bytes("InvalidInput", abi.encodePacked(InvalidInput.selector));
        emit log_named_bytes("InitializationFailed", abi.encodePacked(InitializationFailed.selector));
        emit log_named_bytes("CashbackTokenPriceNotConfigured", abi.encodePacked(CashbackTokenPriceNotConfigured.selector));
        emit log_named_bytes("InvalidValue", abi.encodePacked(InvalidValue.selector));
        emit log_named_bytes("OnlyEtherFiSafe", abi.encodePacked(OnlyEtherFiSafe.selector));
        emit log_named_bytes("CannotWithdrawZeroAmount", abi.encodePacked(CannotWithdrawZeroAmount.selector));
        emit log_named_bytes("WithdrawFundsFailed", abi.encodePacked(WithdrawFundsFailed.selector));
        emit log_named_bytes("OnlyCashModule", abi.encodePacked(OnlyCashModule.selector));
        emit log_named_bytes("ArrayLengthMismatch", abi.encodePacked(ArrayLengthMismatch.selector));
        emit log_named_bytes("InvalidModule", abi.encodePacked(InvalidModule.selector));
        emit log_named_bytes("InvalidCashModule", abi.encodePacked(InvalidCashModule.selector));
        emit log_named_bytes("InvalidCashLens", abi.encodePacked(InvalidCashLens.selector));
        emit log_named_bytes("OnlyAdmin", abi.encodePacked(OnlyAdmin.selector));
        emit log_named_bytes("ModulesAlreadySetup", abi.encodePacked(ModulesAlreadySetup.selector));
        emit log_named_bytes("CollateralPreferenceIsEmpty", abi.encodePacked(CollateralPreferenceIsEmpty.selector));
        emit log_named_bytes("UnsupportedCollateralToken", abi.encodePacked(UnsupportedCollateralToken.selector));
        emit log_named_bytes("UnsupportedRepayToken", abi.encodePacked(UnsupportedRepayToken.selector));
        emit log_named_bytes("UnsupportedBorrowToken", abi.encodePacked(UnsupportedBorrowToken.selector));
        emit log_named_bytes("InsufficientCollateral", abi.encodePacked(InsufficientCollateral.selector));
        emit log_named_bytes("InsufficientCollateralToRepay", abi.encodePacked(InsufficientCollateralToRepay.selector));
        emit log_named_bytes("InsufficientLiquidity", abi.encodePacked(InsufficientLiquidity.selector));
        emit log_named_bytes("CannotLiquidateYet", abi.encodePacked(CannotLiquidateYet.selector));
        emit log_named_bytes("ZeroCollateralValue", abi.encodePacked(ZeroCollateralValue.selector));
        emit log_named_bytes("OnlyUserCanRepayWithCollateral", abi.encodePacked(OnlyUserCanRepayWithCollateral.selector));
        emit log_named_bytes("AlreadyCollateralToken", abi.encodePacked(AlreadyCollateralToken.selector));
        emit log_named_bytes("AlreadyBorrowToken", abi.encodePacked(AlreadyBorrowToken.selector));
        emit log_named_bytes("NotACollateralToken", abi.encodePacked(NotACollateralToken.selector));
        emit log_named_bytes("NoCollateralTokenLeft", abi.encodePacked(NoCollateralTokenLeft.selector));
        emit log_named_bytes("NotABorrowToken", abi.encodePacked(NotABorrowToken.selector));
        emit log_named_bytes("NoBorrowTokenLeft", abi.encodePacked(NoBorrowTokenLeft.selector));
        emit log_named_bytes("TotalCollateralAmountNotZero", abi.encodePacked(TotalCollateralAmountNotZero.selector));
        emit log_named_bytes("InsufficientLiquidityPleaseTryAgainLater", abi.encodePacked(InsufficientLiquidityPleaseTryAgainLater.selector));
        emit log_named_bytes("LiquidAmountLesserThanRequired", abi.encodePacked(LiquidAmountLesserThanRequired.selector));
        emit log_named_bytes("ZeroTotalBorrowTokens", abi.encodePacked(ZeroTotalBorrowTokens.selector));
        emit log_named_bytes("InsufficientBorrowShares", abi.encodePacked(InsufficientBorrowShares.selector));
        emit log_named_bytes("UserStillLiquidatable", abi.encodePacked(UserStillLiquidatable.selector));
        emit log_named_bytes("TotalBorrowingsForUserNotZero", abi.encodePacked(TotalBorrowingsForUserNotZero.selector));
        emit log_named_bytes("BorrowTokenConfigAlreadySet", abi.encodePacked(BorrowTokenConfigAlreadySet.selector));
        emit log_named_bytes("AccountUnhealthy", abi.encodePacked(AccountUnhealthy.selector));
        emit log_named_bytes("BorrowTokenStillInTheSystem", abi.encodePacked(BorrowTokenStillInTheSystem.selector));
        emit log_named_bytes("RepaymentAmountIsZero", abi.encodePacked(RepaymentAmountIsZero.selector));
        emit log_named_bytes("LiquidatableAmountIsZero", abi.encodePacked(LiquidatableAmountIsZero.selector));
        emit log_named_bytes("LtvCannotBeGreaterThanLiquidationThreshold", abi.encodePacked(LtvCannotBeGreaterThanLiquidationThreshold.selector));
        emit log_named_bytes("OraclePriceZero", abi.encodePacked(OraclePriceZero.selector));
        emit log_named_bytes("BorrowAmountZero", abi.encodePacked(BorrowAmountZero.selector));
        emit log_named_bytes("SharesCannotBeZero", abi.encodePacked(SharesCannotBeZero.selector));
        emit log_named_bytes("SharesCannotBeLessThanMinShares", abi.encodePacked(SharesCannotBeLessThanMinShares.selector));
        emit log_named_bytes("SupplyCapBreached", abi.encodePacked(SupplyCapBreached.selector));
        emit log_named_bytes("EtherFiSafeCannotSupplyDebtTokens", abi.encodePacked(EtherFiSafeCannotSupplyDebtTokens.selector));
        emit log_named_bytes("NotAEtherFiSafe", abi.encodePacked(NotAEtherFiSafe.selector));
        emit log_named_bytes("BorrowTokenCannotBeRemovedFromCollateral", abi.encodePacked(BorrowTokenCannotBeRemovedFromCollateral.selector));
        emit log_named_bytes("DuplicateElementFound", abi.encodePacked(DuplicateElementFound.selector));
        emit log_named_bytes("InvalidSignatures", abi.encodePacked(InvalidSignatures.selector));
        emit log_named_bytes("InvalidAddress", abi.encodePacked(InvalidAddress.selector));
        emit log_named_bytes("InvalidSigner", abi.encodePacked(InvalidSigner.selector));
        emit log_named_bytes("InvalidERC1271Signer", abi.encodePacked(InvalidERC1271Signer.selector));
        emit log_named_bytes("ExceededDailySpendingLimit", abi.encodePacked(ExceededDailySpendingLimit.selector));
        emit log_named_bytes("ExceededMonthlySpendingLimit", abi.encodePacked(ExceededMonthlySpendingLimit.selector));
        emit log_named_bytes("DailyLimitCannotBeGreaterThanMonthlyLimit", abi.encodePacked(DailyLimitCannotBeGreaterThanMonthlyLimit.selector));
        emit log_named_bytes("InvalidTimezoneOffset", abi.encodePacked(InvalidTimezoneOffset.selector));
        emit log_named_bytes("InsufficientBalanceOnSafe", abi.encodePacked(InsufficientBalanceOnSafe.selector));
        emit log_named_bytes("TransactionAlreadyCleared", abi.encodePacked(TransactionAlreadyCleared.selector));
        emit log_named_bytes("OnlyEtherFiWallet", abi.encodePacked(OnlyEtherFiWallet.selector));
        emit log_named_bytes("UnsupportedToken", abi.encodePacked(UnsupportedToken.selector));
        emit log_named_bytes("OnlyBorrowToken", abi.encodePacked(OnlyBorrowToken.selector));
        emit log_named_bytes("AmountZero", abi.encodePacked(AmountZero.selector));
        emit log_named_bytes("InsufficientBalance", abi.encodePacked(InsufficientBalance.selector));
        emit log_named_bytes("BorrowingsExceedMaxBorrowAfterSpending", abi.encodePacked(BorrowingsExceedMaxBorrowAfterSpending.selector));
        emit log_named_bytes("RecipientCannotBeAddressZero", abi.encodePacked(RecipientCannotBeAddressZero.selector));
        emit log_named_bytes("OnlyCashModuleController", abi.encodePacked(OnlyCashModuleController.selector));
        emit log_named_bytes("CannotWithdrawYet", abi.encodePacked(CannotWithdrawYet.selector));
        emit log_named_bytes("ModeAlreadySet", abi.encodePacked(ModeAlreadySet.selector));
        emit log_named_bytes("OnlyDebtManager", abi.encodePacked(OnlyDebtManager.selector));
        emit log_named_bytes("AlreadyInSameTier", abi.encodePacked(AlreadyInSameTier.selector));
        emit log_named_bytes("CashbackPercentageGreaterThanMaxAllowed", abi.encodePacked(CashbackPercentageGreaterThanMaxAllowed.selector));
        emit log_named_bytes("SplitAlreadyTheSame", abi.encodePacked(SplitAlreadyTheSame.selector));
        emit log_named_bytes("OnlyOneTokenAllowedInCreditMode", abi.encodePacked(OnlyOneTokenAllowedInCreditMode.selector));
        emit log_named_bytes("SettlementDispatcherNotSetForBinSponsor", abi.encodePacked(SettlementDispatcherNotSetForBinSponsor.selector));
        emit log_named_bytes("UnsupportedLiquidAsset", abi.encodePacked(UnsupportedLiquidAsset.selector));
        emit log_named_bytes("AssetNotSupportedForDeposit", abi.encodePacked(AssetNotSupportedForDeposit.selector));
        emit log_named_bytes("Unauthorized", abi.encodePacked(Unauthorized.selector));
        emit log_named_bytes("InvalidConfiguration", abi.encodePacked(InvalidConfiguration.selector));
        emit log_named_bytes("InsufficientNativeFee", abi.encodePacked(InsufficientNativeFee.selector));
        emit log_named_bytes("NativeTransferFailed", abi.encodePacked(NativeTransferFailed.selector));
        emit log_named_bytes("InsufficientReturnAmount", abi.encodePacked(InsufficientReturnAmount.selector));
        emit log_named_bytes("UnsupportedAsset", abi.encodePacked(UnsupportedAsset.selector));
        emit log_named_bytes("SwappingToSameAsset", abi.encodePacked(SwappingToSameAsset.selector));
        emit log_named_bytes("OutputLessThanMinAmount", abi.encodePacked(OutputLessThanMinAmount.selector));
        emit log_named_bytes("InsufficientAmount", abi.encodePacked(InsufficientAmount.selector));
        emit log_named_bytes("InsufficientMinAmount", abi.encodePacked(InsufficientMinAmount.selector));
        emit log_named_bytes("InvalidStargatePool", abi.encodePacked(InvalidStargatePool.selector));
        emit log_named_bytes("OnlySafeAdmin", abi.encodePacked(OnlySafeAdmin.selector));
        emit log_named_bytes("InvalidSignature", abi.encodePacked(InvalidSignature.selector));
        emit log_named_bytes("TokenOracleNotSet", abi.encodePacked(TokenOracleNotSet.selector));
        emit log_named_bytes("PriceOracleFailed", abi.encodePacked(PriceOracleFailed.selector));
        emit log_named_bytes("InvalidPrice", abi.encodePacked(InvalidPrice.selector));
        emit log_named_bytes("OraclePriceTooOld", abi.encodePacked(OraclePriceTooOld.selector));
        emit log_named_bytes("StablePriceCannotBeZero", abi.encodePacked(StablePriceCannotBeZero.selector));
        emit log_named_bytes("OnlyUpgrader", abi.encodePacked(OnlyUpgrader.selector));
        emit log_named_bytes("OnlyPauser", abi.encodePacked(OnlyPauser.selector));
        emit log_named_bytes("OnlyUnpauser", abi.encodePacked(OnlyUnpauser.selector));
        emit log_named_bytes("InsufficientSigners", abi.encodePacked(InsufficientSigners.selector));
        emit log_named_bytes("EmptySigners", abi.encodePacked(EmptySigners.selector));
        emit log_named_bytes("InvalidOwnerAddress", abi.encodePacked(InvalidOwnerAddress.selector));
        emit log_named_bytes("AllOwnersRemoved", abi.encodePacked(AllOwnersRemoved.selector));
        emit log_named_bytes("OwnersLessThanThreshold", abi.encodePacked(OwnersLessThanThreshold.selector));
        emit log_named_bytes("InvalidThreshold", abi.encodePacked(InvalidThreshold.selector));
        emit log_named_bytes("MultiSigAlreadySetup", abi.encodePacked(MultiSigAlreadySetup.selector));
        emit log_named_bytes("CannotRemoveCashModule", abi.encodePacked(CannotRemoveCashModule.selector));
        emit log_named_bytes("UnsupportedModule", abi.encodePacked(UnsupportedModule.selector));
        emit log_named_bytes("OnlyModules", abi.encodePacked(OnlyModules.selector));
        emit log_named_bytes("CallFailed", abi.encodePacked(CallFailed.selector));
        emit log_named_bytes("ModuleSetupFailed", abi.encodePacked(ModuleSetupFailed.selector));
        emit log_named_bytes("InvalidOverridingRecoverySigners", abi.encodePacked(InvalidOverridingRecoverySigners.selector));
        emit log_named_bytes("RecoveryManagerAlreadyInitialized", abi.encodePacked(RecoveryManagerAlreadyInitialized.selector));
        emit log_named_bytes("InvalidUserRecoverySigner", abi.encodePacked(InvalidUserRecoverySigner.selector));
        emit log_named_bytes("InvalidRecoverySignature", abi.encodePacked(InvalidRecoverySignature.selector));
        emit log_named_bytes("RecoveryDisabled", abi.encodePacked(RecoveryDisabled.selector));
        emit log_named_bytes("RecoverySignersLengthLessThanThreshold", abi.encodePacked(RecoverySignersLengthLessThanThreshold.selector));
        emit log_named_bytes("InsufficientRecoverySignatures", abi.encodePacked(InsufficientRecoverySignatures.selector));
        emit log_named_bytes("InvalidRecoverySignatures", abi.encodePacked(InvalidRecoverySignatures.selector));
        emit log_named_bytes("InvalidStartIndex", abi.encodePacked(InvalidStartIndex.selector));
        emit log_named_bytes("InvalidRecoverySigner", abi.encodePacked(InvalidRecoverySigner.selector));
        emit log_named_bytes("DestinationDataNotSet", abi.encodePacked(DestinationDataNotSet.selector));
        emit log_named_bytes("StargateValueInvalid", abi.encodePacked(StargateValueInvalid.selector));
        emit log_named_bytes("InsufficientFeeToCoverCost", abi.encodePacked(InsufficientFeeToCoverCost.selector));
        emit log_named_bytes("InsufficientMinReturn", abi.encodePacked(InsufficientMinReturn.selector));
        emit log_named_bytes("InvalidTeller", abi.encodePacked(InvalidTeller.selector));
        emit log_named_bytes("OnlyOwner", abi.encodePacked(OnlyOwner.selector));
        emit log_named_bytes("EthTransferFailed", abi.encodePacked(EthTransferFailed.selector));
        emit log_named_bytes("BalanceTooLow", abi.encodePacked(BalanceTooLow.selector));
        emit log_named_bytes("AmountGreaterThanDeposit", abi.encodePacked(AmountGreaterThanDeposit.selector));
        emit log_named_bytes("AmountCannotBeZero", abi.encodePacked(AmountCannotBeZero.selector));
        emit log_named_bytes("NotARegisteredSafe", abi.encodePacked(NotARegisteredSafe.selector));
        emit log_named_bytes("TopUpAlreadyProcessed", abi.encodePacked(TopUpAlreadyProcessed.selector));
        emit log_named_bytes("InvalidTopUpAddress", abi.encodePacked(InvalidTopUpAddress.selector));
        emit log_named_bytes("TokenCannotBeZeroAddress", abi.encodePacked(TokenCannotBeZeroAddress.selector));
        emit log_named_bytes("TokenConfigNotSet", abi.encodePacked(TokenConfigNotSet.selector));
        emit log_named_bytes("ZeroBalance", abi.encodePacked(ZeroBalance.selector));
        emit log_named_bytes("RecoveryWalletNotSet", abi.encodePacked(RecoveryWalletNotSet.selector));
        emit log_named_bytes("RecoveryWalletCannotBeZeroAddress", abi.encodePacked(RecoveryWalletCannotBeZeroAddress.selector));
        emit log_named_bytes("OnlyUnsupportedTokens", abi.encodePacked(OnlyUnsupportedTokens.selector));
        emit log_named_bytes("InvalidConfig", abi.encodePacked(InvalidConfig.selector));
        emit log_named_bytes("OnlyRoleRegistryOwner", abi.encodePacked(OnlyRoleRegistryOwner.selector));
    } 
}